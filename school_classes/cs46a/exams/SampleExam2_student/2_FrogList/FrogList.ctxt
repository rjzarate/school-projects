#BlueJ class context
comment0.target=FrogList
comment0.text=\n\ Manages\ an\ array\ list\ of\ class\ Frog.\n\n\ Step\ 2\:\ Enter\ your\ name\ for\ @author\ and\ the\ password\ for\ @version\n\ @author\ \ Froilan\ Zarate\n\ @version\ SampleExamTwo\n
comment1.params=list
comment1.target=FrogList(java.util.ArrayList)
comment1.text=\n\ Constructs\ an\ object\ of\ class\ FrogList\ by\n\ initializing\ the\ instance\ variable\ to\ a\n\ given\ array\ list\ of\ class\ Frog.\n\ \n\ @param\ list\ an\ array\ list\ of\ class\ Frog\n
comment2.params=
comment2.target=FrogList()
comment2.text=\n\ Initializes\ the\ instance\ variable\ to\ an\n\ empty\ array\ list\ of\ class\ Frog.\n
comment3.params=frog
comment3.target=void\ addFirst(Frog)
comment3.text=\n\ Adds\ a\ frog\ at\ the\ beginning\ of\ the\ list.\n\n\ @param\ frog\ the\ Frog\ object\ to\ add\n
comment4.params=frog
comment4.target=void\ addLast(Frog)
comment4.text=\n\ Adds\ a\ frog\ at\ the\ end\ of\ the\ list.\n\n\ @param\ frog\ the\ Frog\ object\ to\ add\n
comment5.params=index
comment5.target=Frog\ delete(int)
comment5.text=\n\ Deletes\ the\ frog\ at\ the\ specified\ index\ and\ \n\ returns\ it\ if\ the\ index\ is\ valid.\ \n\ Otherwise,\ the\ method\ returns\ null\ without\ \n\ changing\ the\ list.\n\n\ @param\ \ index\ the\ index\ of\ the\ frog\ to\ be\ deleted\n\ @return\ the\ element\ at\ the\ specified\ index\n\ \ \ \ \ \ \ \ \ null\ if\ the\ index\ is\ invalid\n
comment6.params=index1\ index2
comment6.target=void\ swap(int,\ int)
comment6.text=\n\ Swaps\ two\ frogs\ in\ the\ list\ if\ both\ indexes\ are\ valid.\n\ The\ method\ does\ nothing\ otherwise.\n\n\ You\ should\ use\ only\ one\ tempary\ variable\ when\ swapping\n\ the\ two\ frogs.\n\ \n\ @param\ index1\ the\ index\ of\ the\ first\ frog\ to\ swap\n\ @param\ index2\ the\ index\ of\ the\ second\ frog\ to\ swap\n
comment7.params=lowLimit\ highLimit
comment7.target=int\ countOfOutOfRange(int,\ int)
comment7.text=\n\ Gets\ the\ number\ of\ frogs\ in\ the\ list\ whose\ weight\n\ is\ not\ in\ the\ specified\ range.\n\ \n\ You\ should\ use\ the\ enhanced\ for\ loop.\n\n\ @param\ lowLimit\ the\ low\ limit\ of\ the\ specified\ range\n\ @param\ highLimit\ the\ high\ limit\ of\ the\ specified\ range\n\ @return\ the\ number\ of\ frogs\ in\ the\ list\ whose\ weight\n\ \ \ \ \ \ \ \ \ is\ out\ of\ the\ specified\ range\n
comment8.params=
comment8.target=java.lang.String\ toString()
comment8.text=\n\ Overrides\ the\ toString()\ method\ and\ returns\ the\ string\ \n\ returned\ by\ the\ toString()\ method\ of\ the\ list.\n\ \n\ @return\ the\ string\ returned\ by\ the\ toString()\ method\ of\ the\ list\n
numComments=9
