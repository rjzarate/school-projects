#BlueJ class context
comment0.target=ArrayListFrog
comment0.text=\n\ Manages\ an\ array\ list\ of\ class\ Frog.\n\n\ Step\ 2\:\ Enter\ your\ name\ for\ @author\ and\ the\ password\ for\ @version\n\ @author\ \ Froilan\ Zarate\n\ @version\ SampleFinalExam\n
comment1.params=list
comment1.target=ArrayListFrog(java.util.ArrayList)
comment1.text=\n\ Constructs\ an\ ArrayListFrog\ object\ by\ initializing\n\ the\ instance\ variable\ to\ the\ passed\ in\ array\ list.\n\ \n\ @param\ list\ the\ array\ list\ of\ class\ Frog\n\ \ \ \ \ \ \ \ to\ be\ managed\n
comment2.params=
comment2.target=ArrayListFrog()
comment2.text=\n\ Constructs\ an\ ArrayListFrog\ object\ by\ creating\n\ a\ new\ empty\ array\ list\ of\ class\ Frog.\n
comment3.params=index\ frog
comment3.target=void\ add(int,\ Frog)
comment3.text=\n\ Adds\ a\ frog\ to\ the\ array\ list\ at\ a\ specified\ \n\ position\ if\ the\ specified\ index\ is\ valid\ and\ \n\ does\ nothing\ otherwise.\n\n\ @param\ index\ the\ specified\ position\ to\ add\ \n\ @param\ frog\ the\ frog\ to\ be\ added\n
comment4.params=index
comment4.target=Frog\ delete(int)
comment4.text=\n\ Deletes\ and\ returns\ the\ frog\ at\ the\ specified\ position\n\ if\ index\ is\ valid\ and\ does\ nothing\ otherwise.\n\ \n\ @param\ index\ the\ index\ of\ the\ frog\ to\ be\ deleted\ \n\ \ \ \ \ \ \ \ from\ the\ array\ list\n\ @return\ the\ frog\ deleted\ if\ index\ is\ valid\n\ \ \ \ \ \ \ \ \ null\ if\ the\ index\ is\ invalid\n
comment5.params=index1\ index2
comment5.target=void\ swap(int,\ int)
comment5.text=\n\ Swaps\ two\ frogs\ at\ specified\ positions\ in\ the\ array\n\ list\ if\ both\ index1\ and\ index2\ are\ valid\ and\ does\n\ nothing\ otherwise.\n\ \n\ Use\ only\ one\ temporary\ variable.\n\ \n\ @param\ index1\ the\ index\ of\ the\ first\ frog\ to\ be\ swapped\n\ @param\ index2\ the\ index\ of\ the\ second\ frog\ to\ be\ swapped\n
comment6.params=
comment6.target=java.lang.String\ toString()
comment6.text=\n\ Gets\ a\ string\ representation\ for\ the\ array\ list.\n\ \n\ @return\ the\ string\ returned\ by\ the\ toString()\ method\n\ \ \ \ \ \ \ \ \ on\ the\ array\ list\n
comment7.params=lowLimit\ highLimit
comment7.target=Frog\ firstInTheRange(double,\ double)
comment7.text=\n\ Gets\ the\ first\ frog\ in\ the\ array\ list\ whose\ weight\ \n\ is\ in\ the\ range\ of\ [lowLimit,\ highLimit].\n\ \n\ You\ should\ use\ the\ enhanced\ for\ loop.\n\ You\ should\ call\ method\ Double.compare()\ to\ compare\ the\ weights.\n\ \n\ @param\ lowLimit\ the\ low\ limit\ of\ the\ specified\ range\n\ @param\ highLimit\ the\ high\ limit\ of\ the\ specified\ range\n\ @return\ the\ first\ frog\ whose\ weight\ is\ in\ the\ specified\ range\n\ \ \ \ \ \ \ \ \ null\ if\ no\ such\ frog\ in\ the\ array\ list\n
comment8.params=
comment8.target=void\ sort()
comment8.text=\n\ Calls\ a\ static\ method\ to\ sort\ the\ array\ list.\n
numComments=9
